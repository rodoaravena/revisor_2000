/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */
// These values are established by empiricism with tests (tradeoff: performance VS precision)
const NEWTON_ITERATIONS = 4;
const NEWTON_MIN_SLOPE = 0.001;
const SUBDIVISION_PRECISION = 0.0000001;
const SUBDIVISION_MAX_ITERATIONS = 10;
const kSplineTableSize = 11;
const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
const float32ArraySupported = typeof Float32Array === 'function';
function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
    return 3.0 * aA1;
}
// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, aA, aB, mX1, mX2) {
    let currentX, currentT, i = 0;
    do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0.0) {
            aB = currentT;
        }
        else {
            aA = currentT;
        }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
}
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {
        const currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0.0) {
            return aGuessT;
        }
        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
}
function LinearEasing(x) {
    return x;
}
export default function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
        throw new Error('bezier x values must be in [0, 1] range');
    }
    if (mX1 === mY1 && mX2 === mY2) {
        return LinearEasing;
    }
    // Precompute samples table
    const sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    for (let i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
    function getTForX(aX) {
        let intervalStart = 0.0;
        let currentSample = 1;
        const lastSample = kSplineTableSize - 1;
        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
            intervalStart += kSampleStepSize;
        }
        --currentSample;
        // Interpolate to provide an initial guess for t
        const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        const guessForT = intervalStart + dist * kSampleStepSize;
        const initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        }
        else if (initialSlope === 0.0) {
            return guessForT;
        }
        else {
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
    }
    return function BezierEasing(x) {
        // Because JavaScript number are imprecise, we should guarantee the extremes are right.
        if (x === 0) {
            return 0;
        }
        if (x === 1) {
            return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmV6aWVyLWVhc2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc21vb3RoLXNjcm9sbC9zcmMvYmV6aWVyLWVhc2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsNkZBQTZGO0FBQzdGLE1BQU0saUJBQWlCLEdBQVcsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sZ0JBQWdCLEdBQVcsS0FBSyxDQUFDO0FBQ3ZDLE1BQU0scUJBQXFCLEdBQVcsU0FBUyxDQUFDO0FBQ2hELE1BQU0sMEJBQTBCLEdBQVcsRUFBRSxDQUFDO0FBRTlDLE1BQU0sZ0JBQWdCLEdBQVcsRUFBRSxDQUFDO0FBQ3BDLE1BQU0sZUFBZSxHQUFXLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBRS9ELE1BQU0scUJBQXFCLEdBQVksT0FBTyxZQUFZLEtBQUssVUFBVSxDQUFDO0FBRTFFLFNBQVMsQ0FBQyxDQUFDLEdBQVcsRUFBRSxHQUFXO0lBQ2pDLE9BQU8sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNyQyxDQUFDO0FBRUQsU0FBUyxDQUFDLENBQUMsR0FBVyxFQUFFLEdBQVc7SUFDakMsT0FBTyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsQ0FBQyxDQUFDLEdBQVc7SUFDcEIsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ25CLENBQUM7QUFFRCxpRUFBaUU7QUFDakUsU0FBUyxVQUFVLENBQUMsRUFBVSxFQUFFLEdBQVcsRUFBRSxHQUFXO0lBQ3RELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxF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QUFDLENBQUM7U0FDVjtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNYLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nXHJcbiAqIEJlemllckVhc2luZyAtIHVzZSBiZXppZXIgY3VydmUgZm9yIHRyYW5zaXRpb24gZWFzaW5nIGZ1bmN0aW9uXHJcbiAqIGJ5IEdhw6t0YW4gUmVuYXVkZWF1IDIwMTQgLSAyMDE1IOKAkyBNSVQgTGljZW5zZVxyXG4gKi9cclxuXHJcbi8vIFRoZXNlIHZhbHVlcyBhcmUgZXN0YWJsaXNoZWQgYnkgZW1waXJpY2lzbSB3aXRoIHRlc3RzICh0cmFkZW9mZjogcGVyZm9ybWFuY2UgVlMgcHJlY2lzaW9uKVxyXG5jb25zdCBORVdUT05fSVRFUkFUSU9OUzogbnVtYmVyID0gNDtcclxuY29uc3QgTkVXVE9OX01JTl9TTE9QRTogbnVtYmVyID0gMC4wMDE7XHJcbmNvbnN0IFNVQkRJVklTSU9OX1BSRUNJU0lPTjogbnVtYmVyID0gMC4wMDAwMDAxO1xyXG5jb25zdCBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUzogbnVtYmVyID0gMTA7XHJcblxyXG5jb25zdCBrU3BsaW5lVGFibGVTaXplOiBudW1iZXIgPSAxMTtcclxuY29uc3Qga1NhbXBsZVN0ZXBTaXplOiBudW1iZXIgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XHJcblxyXG5jb25zdCBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQ6IGJvb2xlYW4gPSB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nO1xyXG5cclxuZnVuY3Rpb24gQShhQTE6IG51bWJlciwgYUEyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gIHJldHVybiAxLjAgLSAzLjAgKiBhQTIgKyAzLjAgKiBhQTE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEIoYUExOiBudW1iZXIsIGFBMjogbnVtYmVyKTogbnVtYmVyIHtcclxuICByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExO1xyXG59XHJcblxyXG5mdW5jdGlvbiBDKGFBMTogbnVtYmVyKTogbnVtYmVyIHtcclxuICByZXR1cm4gMy4wICogYUExO1xyXG59XHJcblxyXG4vLyBSZXR1cm5zIHgodCkgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgeSh0KSBnaXZlbiB0LCB5MSwgYW5kIHkyLlxyXG5mdW5jdGlvbiBjYWxjQmV6aWVyKGFUOiBudW1iZXIsIGFBMTogbnVtYmVyLCBhQTI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUO1xyXG59XHJcblxyXG4vLyBSZXR1cm5zIGR4L2R0IGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIGR5L2R0IGdpdmVuIHQsIHkxLCBhbmQgeTIuXHJcbmZ1bmN0aW9uIGdldFNsb3BlKGFUOiBudW1iZXIsIGFBMTogbnVtYmVyLCBhQTI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgcmV0dXJuIDMuMCAqIEEoYUExLCBhQTIpICogYVQgKiBhVCArIDIuMCAqIEIoYUExLCBhQTIpICogYVQgKyBDKGFBMSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZShhWDogbnVtYmVyLCBhQTogbnVtYmVyLCBhQjogbnVtYmVyLCBtWDE6IG51bWJlciwgbVgyOiBudW1iZXIpIHtcclxuICBsZXQgY3VycmVudFgsIGN1cnJlbnRULCBpOiBudW1iZXIgPSAwO1xyXG4gIGRvIHtcclxuICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XHJcbiAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xyXG4gICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XHJcbiAgICAgIGFCID0gY3VycmVudFQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhQSA9IGN1cnJlbnRUO1xyXG4gICAgfVxyXG4gIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IFNVQkRJVklTSU9OX1BSRUNJU0lPTiAmJiArK2kgPCBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyk7XHJcbiAgcmV0dXJuIGN1cnJlbnRUO1xyXG59XHJcblxyXG5mdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWDogbnVtYmVyLCBhR3Vlc3NUOiBudW1iZXIsIG1YMTogbnVtYmVyLCBtWDI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IE5FV1RPTl9JVEVSQVRJT05TOyArK2kpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRTbG9wZTogbnVtYmVyID0gZ2V0U2xvcGUoYUd1ZXNzVCwgbVgxLCBtWDIpO1xyXG4gICAgaWYgKGN1cnJlbnRTbG9wZSA9PT0gMC4wKSB7XHJcbiAgICAgIHJldHVybiBhR3Vlc3NUO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY3VycmVudFg6IG51bWJlciA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XHJcbiAgICBhR3Vlc3NUIC09IGN1cnJlbnRYIC8gY3VycmVudFNsb3BlO1xyXG4gIH1cclxuICByZXR1cm4gYUd1ZXNzVDtcclxufVxyXG5cclxuZnVuY3Rpb24gTGluZWFyRWFzaW5nKHg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgcmV0dXJuIHg7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJlemllcihtWDE6IG51bWJlciwgbVkxOiBudW1iZXIsIG1YMjogbnVtYmVyLCBtWTI6IG51bWJlcikge1xyXG4gIGlmICghKDAgPD0gbVgxICYmIG1YMSA8PSAxICYmIDAgPD0gbVgyICYmIG1YMiA8PSAxKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdiZXppZXIgeCB2YWx1ZXMgbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2UnKTtcclxuICB9XHJcblxyXG4gIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikge1xyXG4gICAgcmV0dXJuIExpbmVhckVhc2luZztcclxuICB9XHJcblxyXG4gIC8vIFByZWNvbXB1dGUgc2FtcGxlcyB0YWJsZVxyXG4gIGNvbnN0IHNhbXBsZVZhbHVlczogbnVtYmVyW10gfCBGbG9hdDMyQXJyYXkgPSBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPyBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpIDogbmV3IEFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xyXG4gIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcclxuICAgIHNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0VEZvclgoYVg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBsZXQgaW50ZXJ2YWxTdGFydDogbnVtYmVyID0gMC4wO1xyXG4gICAgbGV0IGN1cnJlbnRTYW1wbGU6IG51bWJlciA9IDE7XHJcbiAgICBjb25zdCBsYXN0U2FtcGxlOiBudW1iZXIgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcclxuXHJcbiAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xyXG4gICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcclxuICAgIH1cclxuICAgIC0tY3VycmVudFNhbXBsZTtcclxuXHJcbiAgICAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcclxuICAgIGNvbnN0IGRpc3Q6IG51bWJlciA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XHJcbiAgICBjb25zdCBndWVzc0ZvclQ6IG51bWJlciA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xyXG5cclxuICAgIGNvbnN0IGluaXRpYWxTbG9wZTogbnVtYmVyID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XHJcbiAgICBpZiAoaW5pdGlhbFNsb3BlID49IE5FV1RPTl9NSU5fU0xPUEUpIHtcclxuICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcclxuICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcclxuICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiBCZXppZXJFYXNpbmcoeDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIC8vIEJlY2F1c2UgSmF2YVNjcmlwdCBudW1iZXIgYXJlIGltcHJlY2lzZSwgd2Ugc2hvdWxkIGd1YXJhbnRlZSB0aGUgZXh0cmVtZXMgYXJlIHJpZ2h0LlxyXG4gICAgaWYgKHggPT09IDApIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBpZiAoeCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIHJldHVybiBjYWxjQmV6aWVyKGdldFRGb3JYKHgpLCBtWTEsIG1ZMik7XHJcbiAgfTtcclxufVxyXG4iXX0=