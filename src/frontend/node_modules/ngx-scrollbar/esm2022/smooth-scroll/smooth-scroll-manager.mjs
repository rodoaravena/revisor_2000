import { Injectable, inject, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { coerceElement } from '@angular/cdk/coercion';
import { Observable, Subject, take, merge, finalize, fromEvent, switchMap, takeUntil, takeWhile } from 'rxjs';
import BezierEasing from './bezier-easing';
import { SMOOTH_SCROLL_OPTIONS } from './smooth-scroll.model';
import * as i0 from "@angular/core";
export class SmoothScrollManager {
    constructor() {
        this.document = inject(DOCUMENT);
        this.zone = inject(NgZone);
        // Default options
        this._defaultOptions = {
            duration: 468,
            easing: {
                x1: 0.42,
                y1: 0,
                x2: 0.58,
                y2: 1
            },
            ...inject(SMOOTH_SCROLL_OPTIONS, { optional: true }),
        };
        // Keeps track of the ongoing SmoothScroll functions, so they can be handled in case of duplication.
        // Each scrolled element gets a destroyer stream which gets deleted immediately after it completes.
        // Purpose: If user called a scroll function again on the same element before the scrolls completes,
        // it cancels the ongoing scroll and starts a new one
        this.onGoingScrolls = new Map();
    }
    /**
     * Timing method
     */
    get now() {
        return this.document.defaultView.performance?.now?.bind(this.document.defaultView.performance) || Date.now;
    }
    /**
     * changes scroll position inside an element
     */
    scrollElement(el, x, y) {
        el.scrollLeft = x;
        el.scrollTop = y;
    }
    /**
     * Handles a given parameter of type HTMLElement, ElementRef or selector
     */
    getElement(el, parent) {
        if (typeof el === 'string') {
            return (parent || this.document).querySelector(el);
        }
        return coerceElement(el);
    }
    /**
     * Initializes a destroyer stream, re-initializes it if the element is already being scrolled
     */
    getScrollDestroyerRef(el) {
        if (this.onGoingScrolls.has(el)) {
            this.onGoingScrolls.get(el).next();
        }
        return this.onGoingScrolls.set(el, new Subject()).get(el);
    }
    /**
     * A function called recursively that, given a context, steps through scrolling
     */
    step(context) {
        return new Observable((subscriber) => {
            let elapsed = (this.now() - context.startTime) / context.duration;
            // avoid elapsed times higher than one
            elapsed = elapsed > 1 ? 1 : elapsed;
            // apply easing to elapsed time
            const value = context.easing(elapsed);
            context.currentX = context.startX + (context.x - context.startX) * value;
            context.currentY = context.startY + (context.y - context.startY) * value;
            this.scrollElement(context.scrollable, context.currentX, context.currentY);
            // Proceed to the step
            requestAnimationFrame(() => {
                subscriber.next();
                subscriber.complete();
            });
        });
    }
    /**
     * Checks if smooth scroll has reached, cleans up the smooth scroll stream
     */
    isReached(context, destroyed) {
        if (context.currentX === context.x && context.currentY === context.y) {
            // IMPORTANT: Destroy the stream when scroll is reached ASAP!
            destroyed.next();
            return true;
        }
        return false;
    }
    /**
     * Scroll recursively until coordinates are reached
     * @param context
     * @param destroyed
     */
    scrolling(context, destroyed) {
        return this.step(context).pipe(
        // Continue while target coordinates hasn't reached yet
        takeWhile(() => !this.isReached(context, destroyed)), switchMap(() => this.scrolling(context, destroyed)));
    }
    /**
     * Deletes the destroyer function, runs if the smooth scroll has finished or interrupted
     */
    onScrollReached(el, resolve, destroyed) {
        destroyed.complete();
        this.onGoingScrolls.delete(el);
        this.zone.run(() => resolve());
    }
    /**
     * Terminates an ongoing smooth scroll
     */
    interrupted(el, destroyed) {
        return merge(fromEvent(el, 'wheel', { passive: true, capture: true }), fromEvent(el, 'touchmove', { passive: true, capture: true }), destroyed).pipe(take(1));
    }
    applyScrollToOptions(el, options) {
        if (!options.duration) {
            this.scrollElement(el, options.left, options.top);
            return Promise.resolve();
        }
        return new Promise((resolve) => {
            this.zone.runOutsideAngular(() => {
                // Initialize a destroyer stream, reinitialize it if the element is already being scrolled
                const destroyed = this.getScrollDestroyerRef(el);
                const context = {
                    scrollable: el,
                    startTime: this.now(),
                    startX: el.scrollLeft,
                    startY: el.scrollTop,
                    x: options.left == null ? el.scrollLeft : ~~options.left,
                    y: options.top == null ? el.scrollTop : ~~options.top,
                    duration: options.duration,
                    easing: BezierEasing(options.easing.x1, options.easing.y1, options.easing.x2, options.easing.y2)
                };
                this.scrolling(context, destroyed).pipe(
                // Continue until interrupted by another scroll (new smooth scroll / wheel / touchmove)
                takeUntil(this.interrupted(el, destroyed)), 
                // Once finished, clean up the destroyer stream and resolve the promise
                finalize(() => this.onScrollReached(el, resolve, destroyed))).subscribe();
            });
        });
    }
    /**
     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
     * left and right always refer to the left and right side of the scrolling container irrespective
     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
     * in an RTL context.
     * @param scrollable element
     * @param customOptions specified the offsets to scroll to.
     */
    scrollTo(scrollable, customOptions) {
        const el = this.getElement(scrollable);
        const isRtl = getComputedStyle(el).direction === 'rtl';
        const options = {
            ...this._defaultOptions,
            ...customOptions,
            ...{
                // Rewrite start & end offsets as right or left offsets.
                left: customOptions.left == null ? (isRtl ? customOptions.end : customOptions.start) : customOptions.left,
                right: customOptions.right == null ? (isRtl ? customOptions.start : customOptions.end) : customOptions.right
            }
        };
        // Rewrite the bottom offset as a top offset.
        if (options.bottom != null) {
            options.top = el.scrollHeight - el.clientHeight - options.bottom;
        }
        // Rewrite the right offset as a left offset.
        if (isRtl) {
            if (options.left != null) {
                options.right = el.scrollWidth - el.clientWidth - options.left;
            }
            options.left = options.right ? -options.right : options.right;
        }
        else {
            if (options.right != null) {
                options.left = el.scrollWidth - el.clientWidth - options.right;
            }
        }
        return this.applyScrollToOptions(el, options);
    }
    /**
     * Scroll to element by reference or selector
     */
    scrollToElement(scrollable, target, customOptions = {}) {
        const scrollableEl = this.getElement(scrollable);
        const targetEl = this.getElement(target, scrollableEl);
        if (targetEl && scrollableEl) {
            const scrollableRect = scrollableEl.getBoundingClientRect();
            const targetRect = targetEl.getBoundingClientRect();
            const options = {
                ...customOptions,
                left: targetRect.left + scrollableEl.scrollLeft - scrollableRect.left + (customOptions.left || 0),
                top: targetRect.top + scrollableEl.scrollTop - scrollableRect.top + (customOptions.top || 0)
            };
            return this.scrollTo(scrollableEl, options);
        }
        return Promise.resolve();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: SmoothScrollManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: SmoothScrollManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: SmoothScrollManager, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,