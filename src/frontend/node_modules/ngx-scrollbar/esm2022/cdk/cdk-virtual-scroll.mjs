import { Directive, Input, inject, effect, contentChild } from '@angular/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { NgScrollbarExt } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class NgScrollbarCdkVirtualScroll {
    constructor() {
        this.scrollbar = inject(NgScrollbarExt);
        this.virtualScrollViewportRef = contentChild(CdkVirtualScrollViewport);
        this.scrollbar.externalViewport = '.cdk-virtual-scroll-viewport';
        this.scrollbar.externalContentWrapper = '.cdk-virtual-scroll-content-wrapper';
        this.scrollbar.externalSpacer = '.cdk-virtual-scroll-spacer';
        effect((onCleanup) => {
            // If content width is bigger than the viewport, we need to update the spacer width to display horizontal scrollbar
            let resizeObserver;
            const virtualScrollViewport = this.virtualScrollViewportRef();
            const spacer = virtualScrollViewport.elementRef.nativeElement.querySelector(this.scrollbar.externalSpacer);
            if (virtualScrollViewport) {
                resizeObserver = new ResizeObserver((entries) => {
                    entries.forEach((entry) => {
                        if (virtualScrollViewport.orientation === 'vertical') {
                            spacer.style.setProperty('width', `${entry.contentRect.width}px`);
                        }
                        else {
                            spacer.style.setProperty('height', `${entry.contentRect.height}px`);
                        }
                    });
                    // Disconnect after first change if directive is not set to auto
                    if (this.cdkVirtualScrollViewport !== 'auto') {
                        resizeObserver.disconnect();
                    }
                    // Observe content wrapper for size changes
                    resizeObserver.observe(virtualScrollViewport._contentWrapper.nativeElement);
                });
            }
            onCleanup(() => resizeObserver.disconnect());
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: NgScrollbarCdkVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.2.0", version: "17.3.3", type: NgScrollbarCdkVirtualScroll, isStandalone: true, selector: "ng-scrollbar[cdkVirtualScrollViewport]", inputs: { cdkVirtualScrollViewport: "cdkVirtualScrollViewport" }, queries: [{ propertyName: "virtualScrollViewportRef", first: true, predicate: CdkVirtualScrollViewport, descendants: true, isSignal: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: NgScrollbarCdkVirtualScroll, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[cdkVirtualScrollViewport]'
                }]
        }], ctorParameters: () => [], propDecorators: { cdkVirtualScrollViewport: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXZpcnR1YWwtc2Nyb2xsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjcm9sbGJhci9jZGsvc3JjL2Nkay12aXJ0dWFsLXNjcm9sbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUNOLFlBQVksRUFHYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0vQyxNQUFNLE9BQU8sMkJBQTJCO0lBUXRDO1FBTmlCLGNBQVMsR0FBbUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRW5ELDZCQUF3QixHQUFxQyxZQUFZLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUtuSCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFHLDhCQUE4QixDQUFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEdBQUcscUNBQXFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsNEJBQTRCLENBQUM7UUFFN0QsTUFBTSxDQUFDLENBQUMsU0FBa0MsRUFBRSxFQUFFO1lBQzVDLG1IQUFtSDtZQUNuSCxJQUFJLGNBQThCLENBQUM7WUFDbkMsTUFBTSxxQkFBcUIsR0FBNkIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFFeEYsTUFBTSxNQUFNLEdBQWdCLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFeEgsSUFBSSxxQkFBcUIsRUFBRTtnQkFDekIsY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLENBQUMsT0FBOEIsRUFBRSxFQUFFO29CQUNyRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBMEIsRUFBRSxFQUFFO3dCQUM3QyxJQUFJLHFCQUFxQixDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUU7NEJBQ3BELE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBTSxJQUFJLENBQUMsQ0FBQzt5QkFDckU7NkJBQU07NEJBQ0wsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEdBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFPLElBQUksQ0FBQyxDQUFDO3lCQUN2RTtvQkFDSCxDQUFDLENBQUMsQ0FBQztvQkFFSCxnRUFBZ0U7b0JBQ2hFLElBQUksSUFBSSxDQUFDLHdCQUF3QixLQUFLLE1BQU0sRUFBRTt3QkFDNUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFDO3FCQUM3QjtvQkFDRCwyQ0FBMkM7b0JBQzNDLGNBQWMsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUM5RSxDQUFDLENBQUMsQ0FBQzthQUNKO1lBRUQsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0F6Q1UsMkJBQTJCO2tHQUEzQiwyQkFBMkIsME5BSXFELHdCQUF3Qjs7MkZBSnhHLDJCQUEyQjtrQkFKdkMsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLHdDQUF3QztpQkFDbkQ7d0RBT1Usd0JBQXdCO3NCQUFoQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgaW5qZWN0LFxyXG4gIGVmZmVjdCxcclxuICBjb250ZW50Q2hpbGQsXHJcbiAgU2lnbmFsLFxyXG4gIEVmZmVjdENsZWFudXBSZWdpc3RlckZuXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbGJhckV4dCB9IGZyb20gJ25neC1zY3JvbGxiYXInO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBzZWxlY3RvcjogJ25nLXNjcm9sbGJhcltjZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTY3JvbGxiYXJDZGtWaXJ0dWFsU2Nyb2xsIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxiYXI6IE5nU2Nyb2xsYmFyRXh0ID0gaW5qZWN0KE5nU2Nyb2xsYmFyRXh0KTtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSB2aXJ0dWFsU2Nyb2xsVmlld3BvcnRSZWY6IFNpZ25hbDxDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQ+ID0gY29udGVudENoaWxkKENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCk7XHJcblxyXG4gIEBJbnB1dCgpIGNka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydDogJycgfCAnYXV0byc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5zY3JvbGxiYXIuZXh0ZXJuYWxWaWV3cG9ydCA9ICcuY2RrLXZpcnR1YWwtc2Nyb2xsLXZpZXdwb3J0JztcclxuICAgIHRoaXMuc2Nyb2xsYmFyLmV4dGVybmFsQ29udGVudFdyYXBwZXIgPSAnLmNkay12aXJ0dWFsLXNjcm9sbC1jb250ZW50LXdyYXBwZXInO1xyXG4gICAgdGhpcy5zY3JvbGxiYXIuZXh0ZXJuYWxTcGFjZXIgPSAnLmNkay12aXJ0dWFsLXNjcm9sbC1zcGFjZXInO1xyXG5cclxuICAgIGVmZmVjdCgob25DbGVhbnVwOiBFZmZlY3RDbGVhbnVwUmVnaXN0ZXJGbikgPT4ge1xyXG4gICAgICAvLyBJZiBjb250ZW50IHdpZHRoIGlzIGJpZ2dlciB0aGFuIHRoZSB2aWV3cG9ydCwgd2UgbmVlZCB0byB1cGRhdGUgdGhlIHNwYWNlciB3aWR0aCB0byBkaXNwbGF5IGhvcml6b250YWwgc2Nyb2xsYmFyXHJcbiAgICAgIGxldCByZXNpemVPYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXI7XHJcbiAgICAgIGNvbnN0IHZpcnR1YWxTY3JvbGxWaWV3cG9ydDogQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0ID0gdGhpcy52aXJ0dWFsU2Nyb2xsVmlld3BvcnRSZWYoKTtcclxuXHJcbiAgICAgIGNvbnN0IHNwYWNlcjogSFRNTEVsZW1lbnQgPSB2aXJ0dWFsU2Nyb2xsVmlld3BvcnQuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zY3JvbGxiYXIuZXh0ZXJuYWxTcGFjZXIpO1xyXG5cclxuICAgICAgaWYgKHZpcnR1YWxTY3JvbGxWaWV3cG9ydCkge1xyXG4gICAgICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzOiBSZXNpemVPYnNlcnZlckVudHJ5W10pID0+IHtcclxuICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnk6IFJlc2l6ZU9ic2VydmVyRW50cnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHZpcnR1YWxTY3JvbGxWaWV3cG9ydC5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgICAgICAgIHNwYWNlci5zdHlsZS5zZXRQcm9wZXJ0eSgnd2lkdGgnLCBgJHsgZW50cnkuY29udGVudFJlY3Qud2lkdGggfXB4YCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgc3BhY2VyLnN0eWxlLnNldFByb3BlcnR5KCdoZWlnaHQnLCBgJHsgZW50cnkuY29udGVudFJlY3QuaGVpZ2h0IH1weGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBEaXNjb25uZWN0IGFmdGVyIGZpcnN0IGNoYW5nZSBpZiBkaXJlY3RpdmUgaXMgbm90IHNldCB0byBhdXRvXHJcbiAgICAgICAgICBpZiAodGhpcy5jZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQgIT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBPYnNlcnZlIGNvbnRlbnQgd3JhcHBlciBmb3Igc2l6ZSBjaGFuZ2VzXHJcbiAgICAgICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKHZpcnR1YWxTY3JvbGxWaWV3cG9ydC5fY29udGVudFdyYXBwZXIubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9uQ2xlYW51cCgoKSA9PiByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==